{"version":3,"sources":["service.js","utils/glyphLayout.js","utils/loadFontFile.js","leaderboard.js","utils/coordUtils.js","GameScreen.js","index.js"],"names":["reportResult","moves","seconds","Promise","resolve","setTimeout","highScores","name","checkKerning","id1","id2","kerningsData","check","amount","kerning","first","second","GlyphLayour","pageImage","regions","keringsData","canvasWidth","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","length","currChar","charCodeAt","preChar","key","findRegions","kerningAmount","cache","push","x","xoffset","scale","y","yoffset","width","height","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","preDraw","spaceXadvance","tmpLength","tmplist","i","char","maxSeq","Math","max","newbase","baseLine","listCharSeq","trim","split","map","s","si","oriWidth","tmpRatio","fixedWidth","lineHeight","accumulate","tmpChar","j","key2","substring","id","positionBreak","lastBreakIndex","tmp","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","type","oriHeight","align","round","setAlignMode","mode","setType","setLineHeight","setFixedGlyphWidth","fixedW","draw","batch","this","base","position","Vector2","newBase","AlignMode","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","join","gl","packFileUrl","textureOptions","a","fetch","then","res","text","packFileContent","pages","regionsData","lines","tmp_array","push_to_kerning","numOfPages","startPageLine","tuple","pageCounter","saveIndex","undefined","filter","item","parseInt","face","size","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","left","top","page","region","id_page","loadTexture","texture","invTextWidth","invTextHeight","regionData","invTexWidth","invTexHeight","TextureRegion","getLineHeight","getPages","getRegions","setNewText","createLeaderboardScreen","Game","time","canvas","viewport","camera","worldWidth","worldHeight","font","goToGameScreen","createGameScreenSystem","setCurrentScreen","inputHandler","createViewportAwareInputHandler","assets","bgTexture","loading","leaderBoard","board","findRegion","retryButton","goldMedal","silverMedal","bronzeMedal","GM_WIDTH","GM_HEIGHT","SM_WIDTH","SM_HEIGHT","BM_WIDTH","GBM_HEIGHT","medalInfos","BOARD_WIDTH","BOARD_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","BUTTON_RECTS","LOADING_WIDTH","LOADING_HEIGHT","coord","addEventListener","setVector","getTouchedWorldCoord","point","verts","DEVICE_PIXEL_RATIO","minX","maxX","minY","maxY","checkPointInsideRect","result","loadHighscores","userResult","TEXT_START_X","NAME_SIZE","RESULT_SIZE","gotData","userData","leaderNameY","leaderResultY","textList","update","delta","data","setProjection","combined","begin","setColor","fillRect","end","destroy","cleanup","goToLeaderBoardScreen","cellTypes","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","cells","solved","flipped","transition","transitionDuration","transitionExpire","transitionDelay","margin","pad","offsetY","offsetX","drawWidth","shadowOffsetY","atlas","cardRegions","backRegion","shadowRegion","clicked","startTime","Date","now","move","cellX","cellY","cell","getCell","cell1","cell2","hidden","drawX","drawY","scaleX","abs","document","getElementById","createViewport","getContext","getCamera","createBatch","screen","currentScreen","loadAtlas","loadFontFile","clearColor","clear","COLOR_BUFFER_BIT","createGameLoop","init"],"mappings":"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","file":"static/js/main.93739a39.chunk.js","sourcesContent":["export const reportResult = (moves, seconds) =>\n  new Promise(resolve => {\n    setTimeout(\n      () =>\n        resolve({\n          moves,\n          seconds,\n          highScores: [\n            {\n              name: 'Lorem Ipsum 01',\n              moves: 12,\n              seconds: 12\n            },\n            {\n              name: 'Lorem Ipsum 02',\n              moves: 14,\n              seconds: 16\n            },\n            {\n              name: 'Lorem Ipsum 03',\n              moves: 14,\n              seconds: 20\n            }\n          ]\n        }),\n      100\n    );\n  });\n","import { Vector2 } from 'gdxjs';\n\nconst checkKerning = (id1, id2, kerningsData) => {\n  let check = false;\n  let amount = 0;\n  for (let kerning of kerningsData) {\n    if (kerning.first === id1 && kerning.second === id2) {\n      amount = kerning.amount;\n      check = true;\n      break;\n    } else {\n      check = false;\n    }\n  }\n  if (check) {\n    return amount;\n  } else {\n    return 0;\n  }\n};\n\nexport default class GlyphLayour {\n  constructor(pageImage, regions, keringsData, canvasWidth) {\n    this.pageImage = pageImage;\n    this.regions = regions;\n    this.kerningsData = keringsData;\n    this.canvasWidth = canvasWidth;\n    this.type = 0;\n    this.align = 2;\n    this.lineHeight = pageImage.lineHeight;\n    this.baseLine = pageImage.base;\n    this.fixedWidth = canvasWidth;\n    // temp variable\n    this.position = new Vector2(0, 0);\n    this.scale = 0;\n    this.newBase = 0;\n    this.oriWidth = 0;\n    this.oriHeight = 0;\n    this.positionBreak = []; // list of break-position's index\n    this.lastBreakIndex = 0;\n    // pre draw\n    this.cache = [];\n    this.preDraw = true;\n  }\n  addToCache = (line, px, py, lineBreak, lineH) => {\n    let xAdvance = 0;\n    for (let index = 0; index < line.length; index++) {\n      const currChar = line.charCodeAt(index);\n      const preChar = line.charCodeAt(index - 1);\n      let key = this.findRegions(currChar);\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\n      // let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\n      this.cache.push({\n        key: key,\n        x:\n          px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\n        width: key.width * this.scale,\n        height: key.height * this.scale\n      });\n      xAdvance += key.xadvance * this.scale;\n    }\n  };\n\n  beforeDrawing = (posX, posY, fontSize, CharSequence) => {\n    if (this.preDraw) {\n      let spaceXadvance = 0;\n      let tmpLength = 0;\n      let tmplist = [];\n      // find longest sequence\n      for (let i = 0; i < CharSequence.length; i++) {\n        const char = CharSequence.charCodeAt(i);\n        const key = this.findRegions(char);\n        if (char !== 32) {\n          tmpLength += key.xadvance * this.scale;\n        } else {\n          spaceXadvance = key.xadvance * this.scale;\n          tmplist.push(tmpLength);\n          tmpLength = 0;\n        }\n      }\n      let maxSeq = Math.max(...tmplist) + spaceXadvance;\n      //////////////////\n      this.newbase = fontSize;\n      this.scale = this.newbase / this.baseLine;\n      CharSequence = CharSequence.trim();\n\n      // split string between /n\n      let listCharSeq = CharSequence.split('/n').map(s => s.trim());\n      let lineH = 0;\n      for (let si = 0; si < listCharSeq.length; si++) {\n        CharSequence = listCharSeq[si];\n        // find new origin Width for each line\n        this.oriWidth = 0;\n        for (let i = 0; i < CharSequence.length; i++) {\n          const char = CharSequence.charCodeAt(i);\n          const preChar = CharSequence.charCodeAt(i - 1);\n          const key = this.findRegions(char);\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData); // new\n          this.oriWidth += kerningAmount * this.scale; // new\n          if (i < CharSequence.length - 1) {\n            this.oriWidth += key.xadvance * this.scale;\n          } else {\n            this.oriWidth += key.width * this.scale;\n          }\n        }\n        let tmpRatio = this.oriWidth / this.fixedWidth;\n        lineH = this.lineHeight * this.scale * si;\n        let accumulate = 0;\n        let tmpChar = '';\n        let lineBreak = 0;\n        // finding position break and length of each line\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\n          for (let i = 0; i < CharSequence.length; i++) {\n            tmpChar += CharSequence[i];\n            const char = CharSequence.charCodeAt(i);\n            const key = this.findRegions(char);\n            accumulate += key.xadvance * this.scale;\n            // every line before last line\n            if (accumulate >= this.fixedWidth) {\n              let j = i;\n              while (j >= 0) {\n                i--;\n                j--;\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\n                accumulate -= key2.xadvance * this.scale;\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\n                  lineBreak = this.lineHeight * this.positionBreak.length;\n                  this.positionBreak.push(i); ///\n                  this.lastBreakIndex = i;\n                  const line = tmpChar.trim();\n                  let tmp = 0;\n                  let key3 = 0;\n\n                  for (let index = 0; index < line.length; index++) {\n                    key3 = this.findRegions(line.charCodeAt(index));\n                    if (index === line.length - 1) {\n                      tmp += key3.width * this.scale;\n                    } else {\n                      tmp += key3.xadvance * this.scale;\n                    }\n                  }\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\n\n                  this.addToCache(line, px, py, lineBreak, lineH);\n\n                  accumulate = 0;\n                  j = -1;\n                  tmpChar = '';\n                }\n              }\n            }\n            // last line\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\n              let tmpChar = '';\n              for (let j = this.lastBreakIndex; j <= i; j++) {\n                tmpChar += CharSequence[j];\n              }\n              const lastLine = tmpChar.trim();\n              let tmpXadvance = 0;\n              let lastKey = 0;\n              for (let index = 0; index < lastLine.length; index++) {\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\n                if (index === lastLine.length - 1) {\n                  tmpXadvance += lastKey.width * this.scale;\n                } else {\n                  tmpXadvance += lastKey.xadvance * this.scale;\n                }\n              }\n              let [px, py] = this.getPositionBasedOnMode(\n                posX,\n                posY,\n                tmpXadvance\n              );\n              lineBreak = this.lineHeight * this.positionBreak.length;\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\n            }\n          }\n        }\n        // if originWidth < fixedWidth or fixedWidth < longest sequence\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\n          this.addToCache(CharSequence, px, py, 0, lineH);\n        }\n      }\n      if (this.type === 0) {\n        this.preDraw = false;\n      }\n      this.oriHeight = this.newbase;\n    }\n  };\n\n  getPositionBasedOnMode = (posX, posY, oriWidth) => {\n    if (this.align === 0) {\n      // posY -= Math.round(this.oriHeight / 2);\n      posX -= Math.round(oriWidth / 2);\n    } else if (this.align === 1) {\n      posX -= oriWidth;\n    }\n    return [posX, posY];\n  };\n\n  setAlignMode = mode => {\n    this.align = mode;\n  };\n\n  setType = type => {\n    this.type = type;\n  };\n\n  setLineHeight = lineHeight => {\n    this.lineHeight = lineHeight;\n  };\n\n  setFixedGlyphWidth = fixedW => {\n    this.fixedWidth = fixedW;\n    // this.fixedHeight = fixedH;\n  };\n\n  findRegions = id => {\n    for (let i = 0; i < this.regions.length; i++) {\n      if (this.regions[i].id === id) {\n        return this.regions[i];\n      }\n    }\n  };\n\n  draw = (batch, CharSequence = '', posX, posY, fontSize = this.baseLine) => {\n    if (this.type === 0) {\n      if (this.preDraw) {\n        this.beforeDrawing(posX, posY, fontSize, CharSequence);\n      }\n      for (let i = 0; i < this.cache.length; i++) {\n        let cache = this.cache[i];\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n      }\n    }\n\n    if (this.type === 1) {\n      this.beforeDrawing(posX, posY, fontSize, CharSequence);\n      for (let i = 0; i < this.cache.length; i++) {\n        let cache = this.cache[i];\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n      }\n      this.cache.length = 0;\n      this.positionBreak.length = 0;\n    }\n  };\n}\n","import { loadTexture, TextureRegion } from \"gdxjs\";\nimport GlyphLayour from \"./glyphLayout\";\n\nexport const AlignMode = {\n  center: 0,\n  right: 1,\n  left: 2,\n};\n\nexport const TextType = {\n  static: 0,\n  dynamic: 1,\n};\n\nfunction concatAndResolveUrl(url, concat) {\n  let url1 = url.split(\"/\");\n  let url2 = concat.split(\"/\");\n  let url3 = [];\n\n  for (let i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === \"..\") {\n      url3.pop();\n    } else if (url1[i] === \".\") {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, l = url2.length; i < l; i++) {\n    if (url2[i] === \"..\") {\n      url3.pop();\n    } else if (url2[i] === \".\") {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return url3.join(\"/\");\n}\n\nexport default async (gl, packFileUrl, textureOptions) => {\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\n  const pages = [];\n  const regionsData = [];\n  const kerningsData = [];\n  let pageImage = null;\n  const lines = packFileContent.split(\"\\n\");\n  let i = 0;\n  let tuple;\n  let tmp_array = [];\n  let push_to_kerning = false;\n\n  let numOfPages = 0;\n  let startPageLine = 2;\n  while (true) {\n    let line = lines[startPageLine];\n    tmp_array.length = 0;\n    tuple = line.split(\" \").map((s) => s.trim());\n    if (tuple[0] === \"page\") {\n      numOfPages += 1;\n    } else {\n      break;\n    }\n    startPageLine += 1;\n  }\n\n  let pageCounter = -1;\n  let saveIndex = 2 + numOfPages + 1; // index to start finding region data\n\n  while (true) {\n    let line = lines[i];\n\n    if (line === undefined) {\n      push_to_kerning = false;\n      break;\n    }\n\n    if (line.split(\" \").length === 2) {\n      const tmp = line.split(\" \");\n      if (tmp[0] === \"kernings\") {\n        push_to_kerning = true;\n      }\n      i++;\n      line = lines[i];\n    }\n\n    if (push_to_kerning && pageImage !== null) {\n      tuple = line.split(\" \").map((s) => s.trim());\n      tuple = tuple.filter((item) => item !== \"\");\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n      const first = parseInt(tmp_array[0], 10);\n      const second = parseInt(tmp_array[1], 10);\n      const amount = parseInt(tmp_array[2], 10);\n      kerningsData.push({ first, second, amount });\n    }\n\n    if (pageImage === null) {\n      pageCounter += 1;\n\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map((s) => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n      const face = tmp_array[0];\n      const size = parseInt(tmp_array[1], 10);\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\n      const charset = tmp_array[4];\n      const unicode = parseInt(tmp_array[5], 10);\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\n      const smooth = parseInt(tmp_array[7], 10);\n      const aa = parseInt(tmp_array[8], 10);\n      const padding = tmp_array[9].split(\",\").map((i) => parseInt(i, 10));\n      const spacing = tmp_array[10].split(\",\").map((i) => parseInt(i, 10));\n      const outline = parseInt(tmp_array[11], 10);\n\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map((s) => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n      const lineHeight = parseInt(tmp_array[0], 10);\n      const base = parseInt(tmp_array[1], 10);\n      const scaleW = parseInt(tmp_array[2], 10);\n      const scaleH = parseInt(tmp_array[3], 10);\n      const num_of_pages = parseInt(tmp_array[4], 10);\n      const packed = parseInt(tmp_array[5], 10);\n      const alphaChnl = parseInt(tmp_array[6], 10);\n      const redChnl = parseInt(tmp_array[7], 10);\n      const greenChnl = parseInt(tmp_array[8], 10);\n      const blueChnl = parseInt(tmp_array[9], 10);\n\n      i = i + pageCounter + 1;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map((s) => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n      const page_id = parseInt(tmp_array[0], 10);\n      const url = tmp_array[1].split('\"');\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\n\n      pageImage = {\n        file,\n        page_id,\n        face,\n        size,\n        bold,\n        italic,\n        charset,\n        unicode,\n        stretchH,\n        smooth,\n        aa,\n        padding,\n        spacing,\n        outline,\n        lineHeight,\n        base,\n        scaleW,\n        scaleH,\n        num_of_pages,\n        packed,\n        alphaChnl,\n        redChnl,\n        greenChnl,\n        blueChnl,\n      };\n      pages.push(pageImage);\n\n      i = saveIndex;\n      line = lines[i];\n    }\n\n    if (!push_to_kerning && pageImage !== null) {\n      tuple = line.split(\" \").map((s) => s.trim());\n      tuple = tuple.filter((item) => item !== \"\");\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n      const id = parseInt(tmp_array[0], 10);\n      const left = parseInt(tmp_array[1], 10);\n      const top = parseInt(tmp_array[2], 10);\n      const width = parseInt(tmp_array[3], 10);\n      const height = parseInt(tmp_array[4], 10);\n      const xoffset = parseInt(tmp_array[5], 10);\n      const yoffset = parseInt(tmp_array[6], 10);\n      const xadvance = parseInt(tmp_array[7], 10);\n      const page = parseInt(tmp_array[8], 10);\n      const region = {\n        id,\n        left,\n        top,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance,\n        page: pageImage,\n        id_page: page,\n      };\n\n      if (region.id_page === pageCounter) {\n        regionsData.push(region);\n      } else {\n        if (pageCounter === numOfPages - 1) {\n          push_to_kerning = true;\n        } else {\n          saveIndex = i;\n          i = -1;\n          pageImage = null;\n        }\n      }\n    }\n\n    i++;\n  }\n\n  //   console.log(kerningsData);\n  //   console.log(pages);\n  //   console.log(regionsData);\n  for (let page of pages) {\n    page.texture = await loadTexture(gl, page.file, textureOptions);\n    page.invTextWidth = 1 / page.texture.width;\n    page.invTextHeight = 1 / page.texture.height;\n  }\n\n  const regions = [];\n\n  for (let regionData of regionsData) {\n    const left = regionData.left;\n    const top = regionData.top;\n    const width = regionData.width;\n    const height = regionData.height;\n    const { texture, invTexWidth, invTexHeight } = regionData.page;\n    regions.push(\n      new TextureRegion(\n        texture,\n        left,\n        top,\n        width,\n        height,\n        regionData,\n        invTexWidth,\n        invTexHeight\n      )\n    );\n  }\n\n  return {\n    getLineHeight() {\n      return pageImage.lineHeight;\n    },\n\n    getPages() {\n      return pages;\n    },\n\n    getRegions() {\n      return regions;\n    },\n\n    findRegions(id) {\n      for (let i = 0; i < regions.length; i++) {\n        if (regions[i].id === id) {\n          return regions[i];\n        }\n      }\n    },\n\n    setNewText(canvasWidth) {\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\n    },\n  };\n};\n","import { reportResult } from './service';\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from 'gdxjs';\nimport { checkPointInsideRect } from './utils/coordUtils';\nimport createGameScreenSystem from './GameScreen';\nimport { AlignMode } from './utils/loadFontFile';\n\nexport const createLeaderboardScreen = Game => {\n  const {\n    moves,\n    time,\n    canvas,\n    viewport,\n    camera,\n    batch,\n    worldWidth,\n    worldHeight,\n    font\n  } = Game;\n\n  const goToGameScreen = async () => {\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\n  };\n\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n\n  const { bgTexture, loading, leaderBoard } = Game.assets;\n  const board = leaderBoard.findRegion('board', -1);\n  const retryButton = leaderBoard.findRegion('retry-button', -1);\n  const goldMedal = leaderBoard.findRegion('medal', 1);\n  const silverMedal = leaderBoard.findRegion('medal', 2);\n  const bronzeMedal = leaderBoard.findRegion('medal', 3);\n\n  const GM_WIDTH = worldWidth / 7.8;\n  const GM_HEIGHT = (GM_WIDTH * goldMedal.height) / goldMedal.width;\n  const SM_WIDTH = worldWidth / 7.8;\n  const SM_HEIGHT = (SM_WIDTH * silverMedal.height) / silverMedal.width;\n  const BM_WIDTH = worldWidth / 7.8;\n  const GBM_HEIGHT = (BM_WIDTH * bronzeMedal.height) / bronzeMedal.width;\n\n  const medalInfos = [\n    {\n      texture: goldMedal,\n      y: (worldHeight * 0.8) / 3,\n      width: GM_WIDTH,\n      height: GM_HEIGHT\n    },\n    {\n      texture: silverMedal,\n      y: (worldHeight * 1.09) / 3,\n      width: SM_WIDTH,\n      height: SM_HEIGHT\n    },\n    {\n      texture: bronzeMedal,\n      y: (worldHeight * 1.37) / 3,\n      width: BM_WIDTH,\n      height: GBM_HEIGHT\n    }\n  ];\n\n  const BOARD_WIDTH = worldWidth * 0.83;\n  const BOARD_HEIGHT = (BOARD_WIDTH * board.height) / board.width;\n\n  const BUTTON_WIDTH = worldWidth / 5;\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * retryButton.height) / retryButton.width;\n\n  const BUTTON_RECTS = [\n    worldWidth / 2 - BUTTON_WIDTH / 2,\n    (worldHeight * 2) / 3,\n    BUTTON_WIDTH,\n    BUTTON_HEIGHT\n  ];\n\n  const LOADING_WIDTH = worldWidth / 5;\n  const LOADING_HEIGHT = (LOADING_WIDTH * loading.height) / loading.width;\n\n  let coord = new Vector2();\n  inputHandler.addEventListener('touchStart', () => {\n    coord.setVector(inputHandler.getTouchedWorldCoord());\n    if (checkPointInsideRect(coord, BUTTON_RECTS)) {\n      Game.moves = 0;\n      Game.time = 0;\n      goToGameScreen();\n    }\n  });\n\n  let highScores;\n  const loadHighscores = async () => {\n    const result = await reportResult(moves, time);\n    highScores = result.highScores;\n  };\n  loadHighscores();\n\n  const userResult = font.setNewText(worldWidth);\n  userResult.setAlignMode(AlignMode.center);\n\n  const TEXT_START_X = worldWidth / 3;\n  const NAME_SIZE = worldWidth / 15;\n  const RESULT_SIZE = worldWidth / 23;\n\n  let gotData = false;\n  let userData = [];\n  let leaderNameY = [\n    (worldHeight * 0.84) / 3,\n    (worldHeight * 1.13) / 3,\n    (worldHeight * 1.4) / 3\n  ];\n  let leaderResultY = [\n    (worldHeight * 0.95) / 3,\n    (worldHeight * 1.24) / 3,\n    (worldHeight * 1.51) / 3\n  ];\n\n  let top1_name = font.setNewText(worldWidth);\n  let top1_result = font.setNewText(worldWidth);\n  let top2_name = font.setNewText(worldWidth);\n  let top2_result = font.setNewText(worldWidth);\n  let top3_name = font.setNewText(worldWidth);\n  let top3_result = font.setNewText(worldWidth);\n\n  let textList = [\n    { name: top1_name, result: top1_result },\n    { name: top2_name, result: top2_result },\n    { name: top3_name, result: top3_result }\n  ];\n\n  const update = delta => {\n    if (highScores && !gotData) {\n      gotData = true;\n      highScores.map(data => userData.push(data));\n    }\n\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    fillRect(batch, bgTexture, 0, 0, worldWidth, worldHeight);\n    board.draw(\n      batch,\n      worldWidth / 2 - BOARD_WIDTH / 2,\n      (worldHeight * 0.47) / 3,\n      BOARD_WIDTH,\n      BOARD_HEIGHT\n    );\n    retryButton.draw(\n      batch,\n      BUTTON_RECTS[0],\n      BUTTON_RECTS[1],\n      BUTTON_RECTS[2],\n      BUTTON_RECTS[3]\n    );\n\n    batch.setColor(68 / 255, 18 / 255, 72 / 255, 1);\n    userResult.draw(\n      batch,\n      `${moves} moves, ${time}s`,\n      worldWidth / 2,\n      (worldHeight * 1.835) / 3,\n      worldWidth / 23\n    );\n    batch.setColor(1, 1, 1, 1);\n\n    if (highScores) {\n      for (let i = 0; i < userData.length; i++) {\n        batch.setColor(1, 1, 1, 1);\n        textList[i].name.draw(\n          batch,\n          userData[i].name,\n          TEXT_START_X,\n          leaderNameY[i],\n          NAME_SIZE\n        );\n        batch.setColor(68 / 255, 18 / 255, 72 / 255, 1);\n        textList[i].result.draw(\n          batch,\n          `${userData[i].moves} moves, ${userData[i].seconds}s`,\n          TEXT_START_X,\n          leaderResultY[i],\n          RESULT_SIZE\n        );\n        batch.setColor(1, 1, 1, 1);\n        medalInfos[i].texture.draw(\n          batch,\n          worldWidth / 5.8,\n          medalInfos[i].y,\n          medalInfos[i].width,\n          medalInfos[i].height\n        );\n      }\n    } else {\n      fillRect(\n        batch,\n        loading,\n        worldWidth / 2 - LOADING_WIDTH / 2,\n        (worldHeight * 1) / 3,\n        LOADING_WIDTH,\n        LOADING_HEIGHT\n      );\n    }\n    batch.end();\n  };\n  return {\n    update,\n    destroy() {\n      inputHandler.cleanup();\n    }\n  };\n};\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\n  const x = point.x * DEVICE_PIXEL_RATIO;\n  const y = point.y * DEVICE_PIXEL_RATIO;\n\n  const minX = verts[0];\n  const maxX = verts[0] + verts[2];\n  const minY = verts[1];\n  const maxY = verts[1] + verts[3];\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","import { createViewportAwareInputHandler } from 'gdxjs';\nimport { createLeaderboardScreen } from './leaderboard';\n\nconst createGameScreenSystem = Game => {\n  const {\n    canvas,\n    viewport,\n    camera,\n    batch,\n    worldWidth,\n    worldHeight,\n    assets\n  } = Game;\n\n  const goToLeaderBoardScreen = async () => {\n    Game.setCurrentScreen(await createLeaderboardScreen(Game));\n  };\n\n  function shuffle(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  }\n\n  const cellTypes = [];\n  for (let i = 0; i < 12; i++) {\n    cellTypes.push(i % 6);\n  }\n\n  shuffle(cellTypes);\n  const cells = [];\n  for (let i = 0; i < cellTypes.length; i++) {\n    cells.push({\n      x: i % 3,\n      y: Math.floor(i / 3),\n      type: cellTypes[i],\n      solved: false,\n      flipped: false,\n      transition: false,\n      transitionDuration: 0,\n      transitionExpire: 0,\n      transitionDelay: 0\n    });\n  }\n\n  const getCell = (x, y) => {\n    return cells[y * 3 + x];\n  };\n\n  let margin,\n    pad,\n    size,\n    offsetY,\n    offsetX,\n    drawWidth,\n    shadowOffsetX,\n    shadowOffsetY;\n\n  drawWidth = worldWidth;\n  margin = drawWidth * 0.05;\n  pad = drawWidth * 0.03;\n  size = (drawWidth - 2 * margin - 2 * pad) / 3;\n  offsetY = (worldHeight - size * 4 - pad * 3) / 2;\n  offsetX = margin;\n\n  shadowOffsetX = 0;\n  shadowOffsetY = size * 0.06;\n\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n\n  const { bgTexture, atlas } = assets;\n\n  const cardRegions = atlas.findRegions('card');\n  const backRegion = atlas.findRegion('back');\n  const shadowRegion = atlas.findRegion('shadow');\n\n  const TRANSITIONING_UP = 'up';\n  const TRANSITIONING_DOWN = 'down';\n  const TRANSITION_AWAY = 'away';\n\n  const clicked = [];\n  let flipped = 0;\n\n  let startTime = Date.now();\n  let move = 0;\n\n  inputHandler.addEventListener('touchStart', () => {\n    if (flipped >= 2) {\n      return;\n    }\n    const x = inputHandler.getTouchedWorldCoord().x;\n    const y = inputHandler.getTouchedWorldCoord().y;\n    const cellX = Math.floor((x - offsetX) / (pad + size));\n    const cellY = Math.floor((y - offsetY) / (pad + size));\n    if (cellX < 0 || cellY < 0 || cellX > 2 || cellY > 3) return;\n    const cell = getCell(cellX, cellY);\n    if (cell.solved || cell.transition || cell.flipped) return;\n    cell.transition = TRANSITIONING_UP;\n    cell.transitionDuration = 0.2;\n    cell.transitionExpire = 0.2;\n    move++;\n    flipped++;\n    clicked.push(cell);\n\n    if (flipped >= 2) {\n      if (clicked[0].type === clicked[1].type) {\n        for (let cell of clicked) {\n          cell.solved = true;\n        }\n        const cell1 = clicked[0];\n        const cell2 = clicked[1];\n        flipped = 0;\n        clicked.length = 0;\n        setTimeout(() => {\n          cell1.transition = TRANSITION_AWAY;\n          cell1.transitionDuration = 0.2;\n          cell1.transitionExpire = 0.2;\n\n          cell2.transition = TRANSITION_AWAY;\n          cell2.transitionDuration = 0.2;\n          cell2.transitionExpire = 0.2;\n        }, 500);\n      } else {\n        setTimeout(() => {\n          for (let cell of clicked) {\n            cell.transition = TRANSITIONING_DOWN;\n            cell.transitionDuration = 0.2;\n            cell.transitionExpire = 0.2;\n          }\n          clicked.length = 0;\n          flipped = 0;\n        }, 500);\n      }\n    }\n  });\n  let solved = 0;\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(bgTexture, 0, 0, 47, 100);\n\n    for (let cell of cells) {\n      if (cell.transition) {\n        cell.transitionExpire -= delta;\n        if (cell.transitionExpire <= 0) {\n          if (cell.transition === TRANSITIONING_UP) {\n            cell.flipped = true;\n          } else if (cell.transition === TRANSITIONING_DOWN) {\n            cell.flipped = false;\n          } else {\n            cell.hidden = true;\n            solved++;\n            if (solved === cells.length) {\n              //   alert(\n              //     `You have completed the game in ${move} moves, ${Math.floor(\n              //       (Date.now() - startTime) / 1000\n              //     )} seconds.`\n              //   );\n              Game.moves = move;\n              Game.time = Math.floor((Date.now() - startTime) / 1000);\n              goToLeaderBoardScreen();\n            }\n          }\n          cell.transition = false;\n          cell.transitionDuration = 0;\n          cell.transitionExpire = 0;\n        }\n      }\n    }\n\n    for (let cell of cells) {\n      if (cell.hidden) {\n        continue;\n      }\n      const region = cardRegions[cell.type];\n      const drawX = offsetX + cell.x * (size + pad);\n      const drawY = offsetY + cell.y * (size + pad);\n\n      if (!cell.transition) {\n        shadowRegion.draw(\n          batch,\n          drawX + shadowOffsetX,\n          drawY + shadowOffsetY,\n          size,\n          size\n        );\n        if (cell.flipped) {\n          region.draw(batch, drawX, drawY, size, size);\n        } else {\n          backRegion.draw(batch, drawX, drawY, size, size);\n        }\n      } else if (\n        cell.transition === TRANSITIONING_UP ||\n        cell.transition === TRANSITIONING_DOWN\n      ) {\n        const scaleX =\n          (Math.abs(cell.transitionExpire - cell.transitionDuration / 2) /\n            cell.transitionDuration) *\n          2;\n        shadowRegion.draw(\n          batch,\n          drawX + shadowOffsetX,\n          drawY + shadowOffsetY,\n          size,\n          size,\n          size / 2,\n          size / 2,\n          0,\n          scaleX,\n          1\n        );\n        if (\n          (cell.transitionExpire > cell.transitionDuration / 2) ^\n          (cell.transition === TRANSITIONING_DOWN)\n        ) {\n          backRegion.draw(\n            batch,\n            drawX,\n            drawY,\n            size,\n            size,\n            size / 2,\n            size / 2,\n            0,\n            scaleX,\n            1\n          );\n        } else {\n          region.draw(\n            batch,\n            drawX,\n            drawY,\n            size,\n            size,\n            size / 2,\n            size / 2,\n            0,\n            scaleX,\n            1\n          );\n        }\n      } else {\n        const scale = cell.transitionExpire / cell.transitionDuration;\n        shadowRegion.draw(\n          batch,\n          drawX + shadowOffsetX,\n          drawY + shadowOffsetY,\n          size,\n          size,\n          size / 2,\n          size / 2,\n          0,\n          scale,\n          scale\n        );\n        region.draw(\n          batch,\n          drawX,\n          drawY,\n          size,\n          size,\n          size / 2,\n          size / 2,\n          0,\n          scale,\n          scale\n        );\n      }\n    }\n\n    batch.end();\n  };\n  return {\n    update,\n    destroy() {\n      inputHandler.cleanup();\n    }\n  };\n};\n\nexport default createGameScreenSystem;\n","import './index.css';\nimport {\n  createViewport,\n  createBatch,\n  createGameLoop,\n  loadTexture,\n  loadAtlas\n} from 'gdxjs';\nimport createGameScreenSystem from './GameScreen';\nimport loadFontFile from './utils/loadFontFile';\n\nconst init = async () => {\n  const worldWidth = 47;\n  const worldHeight = 100;\n\n  const canvas = document.getElementById('main');\n  const viewport = createViewport(canvas, worldWidth, worldHeight);\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = createBatch(gl);\n\n  const Game = {\n    moves: 0,\n    time: 0,\n    canvas,\n    viewport,\n    gl,\n    camera,\n    batch,\n    worldWidth,\n    worldHeight,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    }\n  };\n\n  const bgTexture = await loadTexture(gl, './bg.png');\n  const atlas = await loadAtlas(gl, './atlas/tingme-flipcard.atlas');\n  const leaderBoard = await loadAtlas(gl, './atlas/leaderBoard.atlas');\n  const loading = await loadTexture(gl, './loading.png');\n\n  const assets = { bgTexture, leaderBoard, atlas, loading };\n  Game.assets = assets;\n\n  const font = await loadFontFile(gl, './fonts/nunito.fnt');\n  Game.font = font;\n\n  Game.setCurrentScreen(await createGameScreenSystem(Game));\n\n  gl.clearColor(0, 0, 0, 0);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n  createGameLoop(update);\n};\n\ninit();\n"],"sourceRoot":""}